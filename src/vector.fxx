
namespace dexter {

  enum class VECTOR_ENTRY_PLACEHOLDER_NAME;

  TMPLT__ struct VECTOR_NAME;

  // eTMPLT_ struct VECTOR_ENTRY_NAME;
  TMPLT__ struct VECTOR_ENTRY_NAME;
  TMPLT__ struct VECTOR_ENTRY_CONST_NAME;


  TMPLT__ struct VECTOR_OPERATOR__NAME;
  TMPLT__ struct VECTOR_OPERATOR__CONST_NAME;


  BINARY_OPERATORS_DECL(0)

  // BINARY_OPERATOR(add);
  // BINARY_OPERATOR(multi);
  // BINARY_OPERATOR(multi);


  TMPLT__
  VALUE_T reduce (
    const VECTOR_TYPE &vec,
    VALUE_T (*const cb)(const VALUE_T &, const VALUE_T &)
  );

  TMPLT__
  VECTOR_TYPE entrywise (
    const VECTOR_TYPE &lhs,
    const VECTOR_TYPE &rhs,
    VALUE_T (*const cb)(const VALUE_T &, const VALUE_T &)
  );

  TMPLT__
  VECTOR_TYPE cartesian (
    const VECTOR_TYPE &lhs,
    const VECTOR_TYPE &rhs,
    VALUE_T (*const cb)(const VALUE_T &, const VALUE_T &)
  );


  // TMPLT__
  // VECTOR_TYPE entrywise_add(const VECTOR_TYPE &lhs, const VECTOR_TYPE &rhs);

};

TMPLT_ std::ostream&
operator<< (
  std::ostream& os,
  const dexter::VECTOR_TYPE &e  );

TMPLT_ std::ostream&
operator<< (
  std::ostream& os,
  const dexter::VECTOR_ENTRY_TYPE &e);
// TMPLT_ std::ostream&
// operator<< (
//   std::ostream& os,
//   const dexter::VECTOR_ENTRY_TYPE &e);

TMPLT_ std::ostream&
operator<< (
  std::ostream& os,
  const dexter::VECTOR_ENTRY_CONST_TYPE &e);
