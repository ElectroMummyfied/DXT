#ifdef COMMA
  #error "COMMA defined somewhere else"
#else
  #define COMMA ,
#endif

#ifdef SEQ_PREFIX_MACRO
  #error "SEQ_POSTFIX_MACRO defined somewhere else"
#else
  #define SEQ_PREFIX_MACRO(s, data, elem) \
    BOOST_PP_CAT(data, elem)
#endif

#ifdef SEQ_PREFIX
  #error "SEQ_PREFIX defined somewhere else"
#else
  #define SEQ_PREFIX(seq, prefix) \
    BOOST_PP_SEQ_TRANSFORM(SEQ_PREFIX_MACRO, prefix, seq)
#endif

#ifdef SEQ_POSTFIX_MACRO
  #error "SEQ_POSTFIX_MACRO defined somewhere else"
#else
  #define SEQ_POSTFIX_MACRO(s, data, elem) \
    BOOST_PP_CAT(elem, data)
#endif

#ifdef SEQ_POSTFIX
  #error "SEQ_POSTFIX defined somewhere else"
#else
  #define SEQ_POSTFIX(seq, postfix) \
    BOOST_PP_SEQ_TRANSFORM(SEQ_POSTFIX_MACRO, postfix, seq)
#endif

#pragma region boiler-plate {

  #ifdef TYPE
    #error "TYPE defined somewhere else"
  #else
    #define TYPE <VALUE_T, KEY_T, CONTAINER_T>
  #endif

  #ifdef _TYPE_
    #error "_TYPE_ defined somewhere else"
  #else
    #define _TYPE_ <          \
      class VALUE_T,          \
      class KEY_T,            \
      template<class, class>  \
        class CONTAINER_T  >
  #endif

  #ifdef _TYPE__
    #error "_TYPE__ defined somewhere else"
  #else
    #define _TYPE__ <                   \
      class VALUE_T,                    \
      class KEY_T = unsigned long,      \
      template<class, class>            \
        class CONTAINER_T = std::map  >
  #endif

  #ifdef TMPLT_
    #error "TMPLT_ defined somewhere else"
  #else
    #define TMPLT_ template _TYPE_
  #endif

  #ifdef TMPLT__
    #error "TMPLT__ defined somewhere else"
  #else
    #define TMPLT__ template _TYPE__
  #endif

  #ifdef STRUCT
    #error "STRUCT defined somewhere else"
  #else
    #define STRUCT TMPLT_ struct
  #endif
#pragma endregion } boiler-plate
#pragma region VECTOR_NAME_ {
  #ifdef VECTOR_NAME
    #error "VECTOR_NAME defined somewhere else"
  #else
    #define VECTOR_NAME vector
  #endif

  #ifdef IMP
    #error "IMP defined somewhere else"
  #else
    #define IMP VECTOR_NAME TYPE
  #endif

  #ifdef IMPL
    #error "IMPL defined somewhere else"
  #else
    #define IMPL(type) TMPLT_ type IMP::
  #endif


  #ifdef VECTOR_TYPE
    #error "VECTOR_TYPE defined somewhere else"
  #else
    #define VECTOR_TYPE VECTOR_NAME TYPE
  #endif


#pragma endregion } VECTOR_NAME_
#pragma region VECTOR_ENTRY_NAME_ {
  #ifdef VECTOR_ENTRY_NAME
    #error "VECTOR_ENTRY_NAME defined somewhere else"
  #else
    #define VECTOR_ENTRY_NAME vector_entry
  #endif

  #ifdef eIMP
    #error "eIMP defined somewhere else"
  #else
    #define eIMP VECTOR_ENTRY_NAME TYPE
  #endif

  #ifdef eIMPL
    #error "IMPL defined somewhere else"
  #else
    #define eIMPL(type) TMPLT_ type eIMP::
  #endif

  #ifdef VECTOR_ENTRY_TYPE
    #error "VECTOR_ENTRY_TYPE defined somewhere else"
  #else
    #define VECTOR_ENTRY_TYPE eIMP
  #endif

#pragma endregion } VECTOR_ENTRY_NAME_
#pragma region VECTOR_ENTRY_CONST_NAME_ {
  #ifdef VECTOR_ENTRY_CONST_NAME
    #error "VECTOR_ENTRY_CONST_NAME defined somewhere else"
  #else
    #define VECTOR_ENTRY_CONST_NAME vector_entry_const
  #endif

  #ifdef ecIMP
    #error "eIMP defined somewhere else"
  #else
    #define ecIMP VECTOR_ENTRY_CONST_NAME TYPE
  #endif

  #ifdef ecIMPL
    #error "ecIMPL defined somewhere else"
  #else
    #define ecIMPL(type) TMPLT_ type ecIMP::
  #endif

  #ifdef VECTOR_ENTRY_CONST_TYPE
    #error "VECTOR_ENTRY_CONST_TYPE defined somewhere else"
  #else
    #define VECTOR_ENTRY_CONST_TYPE ecIMP
  #endif
#pragma endregion } VECTOR_ENTRY_CONST_NAME_


#ifdef VECTOR_ENTRY_PLACEHOLDER_NAME
  #error "VECTOR_ENTRY_PLACEHOLDER_NAME defined somewhere else"
#else
  #define VECTOR_ENTRY_PLACEHOLDER_NAME vector_entry_placeholder
#endif

// #ifdef VECTOR_ENTRY_PLACEHOLDER_TYPE
//   #error "VECTOR_ENTRY_PLACEHOLDER_TYPE defined somewhere else"
// #else
//   #define VECTOR_ENTRY_PLACEHOLDER_TYPE VECTOR_ENTRY_PLACEHOLDER_NAME
// #endif

#ifdef VECTOR_OPERATOR_BASE_NAME
  #error "VECTOR_ENTRY_PLACEHOLDER_BASE_NAME defined somewhere else"
#else
  #define VECTOR_OPERATOR_BASE_NAME vector_operator_base
#endif

#pragma region VECTOR_OPERATOR__NAME_ {
  #ifdef VECTOR_OPERATOR__NAME
    #error "VECTOR_OPERATOR__NAME defined somewhere else"
  #else
    #define VECTOR_OPERATOR__NAME vector_operator_
  #endif

  #ifdef wIMP
    #error "wIMP defined somewhere else"
  #else
    #define wIMP VECTOR_OPERATOR__NAME TYPE
  #endif

  #ifdef wIMPL
    #error "wIMPL defined somewhere else"
  #else
    #define wIMPL(type) TMPLT_ type wIMP::
  #endif

  #ifdef VECTOR_OPERATOR__TYPE
    #error "VECTOR_OPERATOR__TYPE defined somewhere else"
  #else
    #define VECTOR_OPERATOR__TYPE wIMP
  #endif
#pragma endregion } VECTOR_ENTRY_WISE_OP_NAME_
#pragma region VECTOR_OPERATOR__CONST_NAME_ {
  #ifdef VECTOR_OPERATOR__CONST_NAME
    #error "VECTOR_OPERATOR__CONST_NAME defined somewhere else"
  #else
    #define VECTOR_OPERATOR__CONST_NAME vector_operator__const
  #endif

  #ifdef wcIMP
    #error "wcIMP defined somewhere else"
  #else
    #define wcIMP VECTOR_OPERATOR__CONST_NAME TYPE
  #endif

  #ifdef wcIMPL
    #error "wcIMPL defined somewhere else"
  #else
    #define wcIMPL(type) TMPLT_ type wcIMP::
  #endif

  #ifdef VECTOR_OPERATOR__CONST_TYPE
    #error "VECTOR_OPERATOR__CONST_TYPE defined somewhere else"
  #else
    #define VECTOR_OPERATOR__CONST_TYPE wcIMP
  #endif
#pragma endregion } VECTOR_ENTRY_WISE_OP_NAME_

#pragma region linking-boiler-plate {
  #ifdef LINK_VECTOR_DEF_BASE
    #error "LINK_VECTOR_DEF_BASE defined somewhere else"
  #else
    #define LINK_VECTOR_DEF_BASE(type)                \
      template class VECTOR_NAME<type>;               \
      template class VECTOR_ENTRY_NAME<type>;         \
      template class VECTOR_ENTRY_CONST_NAME<type>;   \
                                                      \
      template std::ostream &                         \
      operator<< <type>(                              \
        std::ostream &,                               \
        const VECTOR_NAME<type> &  );                 \
                                                      \
      template std::ostream &                         \
      operator<< <type>(                              \
        std::ostream &,                               \
        const VECTOR_ENTRY_NAME<type> &  );           \
      template std::ostream &                         \
                                                      \
      operator<< <type>(                              \
        std::ostream &,                               \
        const VECTOR_ENTRY_CONST_NAME<type> &  )
  #endif

  #ifdef LINK_VECTOR_DEF
    #error "LINK_VECTOR_DEF defined somewhere else"
  #else
    #define LINK_VECTOR_DEF(type1, type2, type3) \
      LINK_VECTOR_DEF_BASE(                      \
        type1 COMMA                              \
        type2 COMMA                              \
        type3 <type2 COMMA type1>)
  #endif

  #ifdef LINK_VECTOR_DEF_BASIC_TYPES_BASE
    #error "LINK_VECTOR_DEF_BASIC_TYPES_BASE defined somewhere else"
  #else
    #define LINK_VECTOR_DEF_BASIC_TYPES_BASE(type2, type3)  \
      LINK_VECTOR_DEF(   bool,  type2, type3);              \
                                                            \
      LINK_VECTOR_DEF( int8_t,  type2, type3);              \
      LINK_VECTOR_DEF(int16_t,  type2, type3);              \
      LINK_VECTOR_DEF(int32_t,  type2, type3);              \
      LINK_VECTOR_DEF(int64_t,  type2, type3);              \
                                                            \
      LINK_VECTOR_DEF( uint8_t, type2, type3);              \
      LINK_VECTOR_DEF(uint16_t, type2, type3);              \
      LINK_VECTOR_DEF(uint32_t, type2, type3);              \
      LINK_VECTOR_DEF(uint64_t, type2, type3);              \
                                                            \
      LINK_VECTOR_DEF( float,   type2, type3);              \
      LINK_VECTOR_DEF(double,   type2, type3)
  #endif

  #ifdef LINK_VECTOR_DEF_BASIC_TYPES
    #error "LINK_VECTOR_DEF_BASIC_TYPES defined somewhere else"
  #else
    #define LINK_VECTOR_DEF_BASIC_TYPES(type3)           \
      LINK_VECTOR_DEF_BASIC_TYPES_BASE( uint8_t, type3); \
      LINK_VECTOR_DEF_BASIC_TYPES_BASE(uint16_t, type3); \
      LINK_VECTOR_DEF_BASIC_TYPES_BASE(uint32_t, type3); \
      LINK_VECTOR_DEF_BASIC_TYPES_BASE(uint64_t, type3)
  #endif
#pragma endregion } linking-boiler-plate

#ifdef VECTOR_BOOL
  #error "VECTOR_BOOL defined somewhere else"
#else
  #define VECTOR_BOOL VECTOR_NAME<bool, KEY_T, CONTAINER_T>
#endif

#ifdef BINARY_OPERATOR_NAMES_SEQUENCE
  #error "BINARY_OPERATOR_NAMES_SEQUENCE defined somewhere else"
#else
  #define BINARY_OPERATOR_NAMES_SEQUENCE \
    (add     )\
    (subtract)\
    (multiply)\
    (divide  )\
    (pow     )\
    (root    )\
    (log     )
#endif

#ifdef BINARY_OPERATORS_DEF_SEQUENCE
  #error "BINARY_OPERATORS_DEF_SEQUENCE defined somewhere else"
#else
  #define BINARY_OPERATORS_DEF_SEQUENCE           \
    ( (add)      (lhs + rhs)                     )\
    ( (subtract) (lhs - rhs)                     )\
    ( (multiply) (lhs * rhs)                     )\
    ( (divide)   (lhs / rhs)                     )\
    ( (pow)      (std::pow(lhs, rhs))            )\
    ( (root)     (std::pow(lhs, 1.0 / rhs))      )\
    ( (log)      (std::log(lhs) / std::log(rhs)) )
#endif

#ifdef BINARY_OPERATOR
  #error "BINARY_OPERATOR defined somewhere else"
#else
  #define BINARY_OPERATOR(name)        \
    template<class T>                  \
    T name(const T &lhs, const T &rhs)
#endif

#ifdef BINARY_OPERATORS_MACRO
  #error "BINARY_OPERATORS_MACRO defined somewhere else"
#else
  #define BINARY_OPERATORS_MACRO(r, data, elem)                    \
    BINARY_OPERATOR(BOOST_PP_SEQ_ELEM(0, elem))                    \
      BOOST_PP_IF(data, { return BOOST_PP_SEQ_ELEM(1, elem); }, ;)
#endif

#ifdef BINARY_OPERATORS_DECL
  #error "BINARY_OPERATORS_DECL defined somewhere else"
#else
  // implementation vs forward-declaration
  #define BINARY_OPERATORS_DECL(true_false) \
    BOOST_PP_SEQ_FOR_EACH(                  \
      BINARY_OPERATORS_MACRO,               \
      true_false,                           \
      BINARY_OPERATORS_DEF_SEQUENCE  )
#endif

#ifdef VECTOR_OPERATORS_PRIMARY_SEQUENCE
  #error "VECTOR_OPERATORS_PRIMARY_SEQUENCE defined somewhere else"
#else
  #define VECTOR_OPERATORS_PRIMARY_SEQUENCE \
    (cartesian) \
    (hadamard) \
    (reduce)
#endif

#ifdef VECTOR_OPERATORS_MACRO
  #error "VECTOR_OPERATORS_MACRO defined somewhere else"
#else
  #define VECTOR_OPERATORS_MACRO(r, prod) \
    (BOOST_PP_SEQ_CAT(prod))
#endif

#ifdef VEC_OP_NAMES_SEQ
  #error "VEC_OP_NAMES_SEQ defined somewhere else"
#else
  #define VEC_OP_NAMES_SEQ                               \
    BOOST_PP_SEQ_FOR_EACH_PRODUCT(                       \
      VECTOR_OPERATORS_MACRO,                            \
      (SEQ_POSTFIX(VECTOR_OPERATORS_PRIMARY_SEQUENCE, _)) \
        (BINARY_OPERATOR_NAMES_SEQUENCE)  )
#endif